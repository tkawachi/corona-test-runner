{"name":"Corona-test-runner","tagline":"Corona SDK で作ったアプリをテストしよう","body":"# Corona SDK test runner\r\n\r\nCorona SDK で作ったアプリケーション用の単体テスト実行環境を提供します。\r\n\r\nこの環境をセットアップするとアプリケーション開始時に単体テストが実行されるようになります。\r\n単体テストがひとつでも失敗するとテスト結果を表示する画面が表示されます。\r\n単体テストが全て成功した場合はアプリケーションが開始されます。\r\n\r\n## セットアップ\r\n\r\n### Mac OS X\r\n\r\n````\r\n$ cd プロジェクトディレクトリ\r\n$ \\curl -L http://bit.ly/corona-test-runner | bash\r\n````\r\n\r\nセットアップにより `main.lua` は `app_main.lua` へ移動されます。\r\n\r\n`_test.lua` で終わるファイルはテストのテンプレートファイルです。\r\n\r\n### テストの書き方\r\n\r\nテストは [lunatest](https://github.com/silentbicycle/lunatest) の記法に従って記述します。\r\n\r\n````\r\n-- sample_test.lua\r\nmodule(..., package.seeall)\r\n\r\nfunction test_double()\r\n   assert_equal(5 * 2, 10)\r\nend\r\n````\r\n\r\nテストファイル一覧を `test_main` の `suite()` 引数に指定します。\r\n\r\n````\r\n-- main.lua\r\n-- Main\r\nrequire(\"test_main\"):suite{\r\n   \"sample_test\",\r\n}:run{\r\n   -- skip = true, -- Skip tests and execute main (For production)\r\n   -- main = \"_main\", -- Specify application main\r\n}\r\n````\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}